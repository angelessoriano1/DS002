# -*- coding: utf-8 -*-
"""Probability.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UafzfvL4q6iqSuqHaLBBeHbN-0yj9tHu
"""

from typing import List 

def uniform_pdf(x: float) -> float:
  return 1 if 0 <= x <1 else 0 

def uniform_cdf(x: float) -> float:
  #returns the probability that a uniform random variable is <= x
  if x< 0: return 0 # unfirm random is never less than 0 
  elif x < 1: return x #e.g p(X ,+ 0.4) = 0.4
  else: return 1 #unfirm random is always less than 1 

import math 
SQRT_TWO_PI = math.sqrt(2 * math.pi)

def normal_pdf(x: float, mu: float = 0, sigma: float = 1) -> float:
  return (math.exp(-(x-mu) ** 2 / 2 / sigma ** 2) / (SQRT_TWO_PI * sigma))

import matplotlib.pyplot as plt
xs = [x / 10.0 for x in range (-50,50)]
plt.plot(xs, [normal_pdf(x, sigma=1) for x in xs], '-', label = 'mu=o, sigma=1')
plt.plot(xs, [normal_pdf(x, sigma=2) for x in xs], '--', label = 'mu=o, sigma=2')
plt.plot(xs, [normal_pdf(x, sigma=0.5) for x in xs], ':', label = 'mu=o, sigma=0.5')
plt.plot(xs, [normal_pdf(x, mu=-1) for x in xs], '-.', label = 'mu=-1, sigma=1')
plt.legend()
plt.title("various normal pdfs")
plt.show()

def normal_cdf(x: float, mu: float = 0, sigma: float = 1) -> float:
  return (1 + math.erf((x-mu) / math.sqrt(2) / sigma)) / 2

xs = [x / 10.0 for x in range (-50,50)]
plt.plot(xs, [normal_cdf(x, sigma=1) for x in xs], '-', label = 'mu=o, sigma=1')
plt.plot(xs, [normal_cdf(x, sigma=2) for x in xs], '--', label = 'mu=o, sigma=2')
plt.plot(xs, [normal_cdf(x, sigma=0.5) for x in xs], ':', label = 'mu=o, sigma=0.5')
plt.plot(xs, [normal_cdf(x, mu=-1) for x in xs], '-.', label = 'mu=-1, sigma=1')
plt.legend()
plt.title("various normal cdfs")
plt.show()

def inverse_normal_cdf(p: float, 
                       mu: float = 0,
                       sigma: float = 1,
                       tolerance: float = 0.00001) -> float:
  # find approximate inverse using binary search 
  #if not standard, compute standard and rescale

  if mu != 0 or sigma != 1:
    return mu +sigma * inverse_normal_cdf(p, tolerance=tolerance)

  low_z = -10.0     #normal_cdf(-10) is (very close to) 0
  hi_z = 10.0       #normal_cdf(10) is (Very close to) 1 

  while hi_z - low_z > tolerance:
    mid_z = (low_z +hi_z) / 2 #consider the midpoint 
    mid_p = normal_cdf(mid_z) # and the cdfs values there
    if mid_p < p:
     low_z = mid_z #midpoint is too low, search above it
    else: 
      hi_z = mid_z #midpoint too high, seach bellow it 
  return mid_z

def bernoulli_trial(p: float) -> int:
  #returns 1 with probability p and 0 with probability 1-p 
  return 1 if random.random() < p else 0 

def binomial(n: int, p: float) -> int:
  #reutns the sum of n bernouli(P) trials
  return sum(bernoulli_trial(p) for _ in range(n))

from collections import Counter 

def binomial_histogram(p:float, n: int, num_points: int) -> None:
  #pick points from a binimoal and plot their hisotgram 
  data = [binomial(n,p) for _ in range(num_points)]

  #use a bar chart to show the actual binomial samples 
  histogram = Counter(data)
  plt.bar([x - 0.4 for x in histogram.keys()], 
          [v / num_points for v in histogram.values()], 
          0.8, 
          color = '0.75')
  mu = p * n 
  sigma = math.sqrt(n * p * (1-p))

  # use a line chart to show the normal approximation 

  xs = range(min(data), max(data) + 1)
  ys = [normal_cdf(i + 0.5, mu, sigma) - normal_cdf(i - 0.5, mu, sigma) for i in xs]

  plt.plot(xs,ys)
  plt.title("binomial distribution vs normal approximation")
  plt.show()