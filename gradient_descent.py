# -*- coding: utf-8 -*-
"""Gradient Descent

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ybA5AJt8IFwguFsgFkAXeEloNNLMvE84
"""

from typing import List

Vector = List[float]

def dot(v: Vector, w: Vector) -> float:
    """Computes v_1 * w_1 + ... + v_n * w_n"""
    assert len(v) == len(w), "vectors must be same length"

    return sum(v_i * w_i for v_i, w_i in zip(v,w))

def sum_of_squares(v: Vector) -> float:
  #compputes the sum of squared elements in v 
  return dot(v,v)

from typing import Callable

def difference_quotient(f: Callable[[float], float],
                        x: float,
                        h: float) -> float:
  return(f(x+h) - f(x)) / h

def square(x: float) -> float:
  return x * x 

def derivative(x: float) -> float:
  return 2 * x

def partial_difference_quotient(f: Callable[[Vector], float], 
                                v: Vector, 
                                i: int, 
                                h: float) -> float:
  #returns the i-th partial difference quotient of f at v 
  w = [v_j + (h if j== i else 0)
  for j, v_j in enumerate(v)]
  return (f(w) - f(v)) / h


def estimate_gradient(f: Callable[[Vector], float], 
                      v: Vector, 
                      h: float = 0.0001):
  return [partial_difference_quotient(f, v, i, h) for i in range(len(v))]

import random 

def distance(v: Vector, w: Vector) -> float:  # type: ignore
    return magnitude(subtract(v, w))

def add(v: Vector, w: Vector) -> Vector:
    """Adds corresponding elements"""
    assert len(v) == len(w), "vectors must be the same length"

    return [v_i + w_i for v_i, w_i in zip(v, w)]

def scalar_multiply(c: float, v: Vector) -> Vector:
    """Multiplies every element by c"""
    return [c * v_i for v_i in v]

def gradient_step(v: Vector, gradient: Vector, step_size: float) -> Vector:
  #Moves 'step size' in the 'gradient' direction from v 
  assert len(v) == len(gradient)
  step = scalar_multiply(step_size, gradient)
  return add(v, step)

def sum_of_squares_gradient(v: Vector) -> Vector:
  return[2 * v_i for v_i in v]


def linear_gradient(x: float, y:float, theta: Vector) -> Vector:
  slope, intercept = theta 
  predicted = slope * x + intercept #prediciton of model
  error = (predicted - y)   #errot is predicted minus actual 
  squared_error = error ** 2 
  grad = [2 * error * x, 2 * error]
  return grad 


from typing import TypeVar, List, Iterator

T = TypeVar('T') #this allows us to type generic functions

def minibatches(dataset: List[T],
                batch_size: int, 
                shuffle: bool = True) -> Iterator[List[T]]:
  if shuffle: random.shuffle(batch_starts)

  for start in batch_starts:
    end = start + batch_size
    yield dataset[start:end]

xs = range(-10, 11)
actuals = [derivative(x) for x in xs]
estimates = [difference_quotient(square, x, h=0.001) for x in xs]

import matplotlib.pyplot as plt
plt.title("actual derivative vs estimates")
plt.plot(xs, actuals, 'rx', label='Actual')
plt.plot(xs, estimates, 'b+', label='Estimate')
plt.legend(loc=9)
plt.show()