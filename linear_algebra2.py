# -*- coding: utf-8 -*-
"""Copy of DS_002_linear_algebra_template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/angelessoriano1/DS002/blob/main/Copy_of_DS_002_linear_algebra_template.ipynb

# Template for linear_algebra.py

This template contains function declarations and a handful of assert tests for `linear_algebra.py`. Edit the return statements in each function until they pass each assertion. Refer to Chapter 4 from "Data Science from Scratch" for help.
"""

#USERNAME = "angelessoriano1"

# Commented out IPython magic to ensure Python compatibility.
# Import your code from GitHub

# This is the root on Google Colab
# Use the magic %cd command to navigate around the file system
# %cd /content/

# Use `isdir()` to see if the repository is already here
#from genericpath import isdir

# get your code
# Does the folder/directory exist?

# Clone the repository with the latest code
#print("Clone the repo")
#!git clone https://github.com/angelessoriano1/DS002.git angelessoriano1

# %cd /content/angelessoriano1
#!git pull

# %cd /content/

from typing import List

Vector = List[float]

def add(v: Vector, w: Vector) -> Vector:
    """Adds corresponding elements"""
    assert len(v) == len(w), "vectors must be the same length"

    return [v_i+w_i for v_i,w_i in zip(v,w)]

def subtract(v: Vector, w: Vector) -> Vector:
    """Subtracts corresponding elements"""
    assert len(v) == len(w), "vectors must be the same length"

    return [v_i-w_i for v_i,w_i in zip(v,w)]


def vector_sum(vectors: List[Vector]) -> Vector:
    """Sums all corresponding elements"""
    # Check that vectors is not empty
    assert vectors, "no vectors provided!"

    # Check the vectors are all the same size
    num_elements = len(vectors[0])
    assert all(len(v) == num_elements for v in vectors), "different sizes!"

    # the i-th element of the result is the sum of every vector[i]
    return [sum(vector[i] for vector in vectors)
            for i in range(num_elements)]


def scalar_multiply(c: float, v: Vector) -> Vector:
    """Multiplies every element by c"""
    return [c * v_i for v_i in v]


def vector_mean(vectors: List[Vector]) -> Vector:
    """Computes the element-wise average"""
    n = len(vectors)
    return scalar_multiply(1/n, vector_sum(vectors))


def dot(v: Vector, w: Vector) -> float:
    """Computes v_1 * w_1 + ... + v_n * w_n"""
    assert len(v) == len(w), "vectors must be same length"

    return sum(v_i * w_i for v_i, w_i in zip(v,w))


def sum_of_squares(v: Vector) -> float:
    """Returns v_1 * v_1 + ... + v_n * v_n"""
    return dot(v, v)


import math

def magnitude(v: Vector) -> float:
    """Returns the magnitude (or length) of v"""
    return math.sqrt(sum_of_squares(v))   # math.sqrt is square root function


def squared_distance(v: Vector, w: Vector) -> float:
    """Computes (v_1 - w_1) ** 2 + ... + (v_n - w_n) ** 2"""
    return sum_of_squares(subtract(v, w))

def distance(v: Vector, w: Vector) -> float:
    """Computes the distance between v and w"""
    return math.sqrt(squared_distance(v, w))


def distance(v: Vector, w: Vector) -> float:  # type: ignore
    return magnitude(subtract(v, w))

assert add([1, 2, 3], [10,9,8]) == [11,11,11], "something's wrong with add()"
assert subtract([11,11,11], [1, 2, 3]) == [10,9,8], "trouble with subtract()"
assert vector_sum([[3,4], [5,6], [7,8]]) == [15, 18], "vector_sum() problem"
assert vector_mean([[1, 2], [3, 4], [5, 6]]) == [3, 4], "oopsie vector_mean()"
assert dot([1, 2, 3], [4, 5, 6]) == 32, "dot() issue"  # 1 * 4 + 2 * 5 + 3 * 6
assert sum_of_squares([1, 2, 3]) == 14, "sum_of_squares() fail"  # 1 * 1 + 2 * 2 + 3 * 3
assert magnitude([3, 4]) == 5, "issue with magnitude()"

